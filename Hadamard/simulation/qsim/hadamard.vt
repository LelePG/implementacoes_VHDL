// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/11/2021 17:09:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    hadamard
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module hadamard_vlg_sample_tst(
	clock,
	enable,
	reset,
	W0,
	W1,
	W2,
	W3,
	W4,
	W5,
	W6,
	W7,
	W8,
	W9,
	W10,
	W11,
	W12,
	W13,
	W14,
	W15,
	sampler_tx
);
input  clock;
input  enable;
input  reset;
input [3:0] W0;
input [3:0] W1;
input [3:0] W2;
input [3:0] W3;
input [3:0] W4;
input [3:0] W5;
input [3:0] W6;
input [3:0] W7;
input [3:0] W8;
input [3:0] W9;
input [3:0] W10;
input [3:0] W11;
input [3:0] W12;
input [3:0] W13;
input [3:0] W14;
input [3:0] W15;
output sampler_tx;

reg sample;
time current_time;
always @(clock or enable or reset or W0 or W1 or W2 or W3 or W4 or W5 or W6 or W7 or W8 or W9 or W10 or W11 or W12 or W13 or W14 or W15)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module hadamard_vlg_check_tst (
	S0,
	S1,
	S2,
	S3,
	S4,
	S5,
	S6,
	S7,
	S8,
	S9,
	S10,
	S11,
	S12,
	S13,
	S14,
	S15,
	sampler_rx
);
input [3:0] S0;
input [3:0] S1;
input [3:0] S2;
input [3:0] S3;
input [3:0] S4;
input [3:0] S5;
input [3:0] S6;
input [3:0] S7;
input [3:0] S8;
input [3:0] S9;
input [3:0] S10;
input [3:0] S11;
input [3:0] S12;
input [3:0] S13;
input [3:0] S14;
input [3:0] S15;
input sampler_rx;

reg [3:0] S0_expected;
reg [3:0] S1_expected;
reg [3:0] S2_expected;
reg [3:0] S3_expected;
reg [3:0] S4_expected;
reg [3:0] S5_expected;
reg [3:0] S6_expected;
reg [3:0] S7_expected;
reg [3:0] S8_expected;
reg [3:0] S9_expected;
reg [3:0] S10_expected;
reg [3:0] S11_expected;
reg [3:0] S12_expected;
reg [3:0] S13_expected;
reg [3:0] S14_expected;
reg [3:0] S15_expected;

reg [3:0] S0_prev;
reg [3:0] S1_prev;
reg [3:0] S2_prev;
reg [3:0] S3_prev;
reg [3:0] S4_prev;
reg [3:0] S5_prev;
reg [3:0] S6_prev;
reg [3:0] S7_prev;
reg [3:0] S8_prev;
reg [3:0] S9_prev;
reg [3:0] S10_prev;
reg [3:0] S11_prev;
reg [3:0] S12_prev;
reg [3:0] S13_prev;
reg [3:0] S14_prev;
reg [3:0] S15_prev;

reg [3:0] S0_expected_prev;
reg [3:0] S1_expected_prev;
reg [3:0] S2_expected_prev;
reg [3:0] S3_expected_prev;
reg [3:0] S4_expected_prev;
reg [3:0] S5_expected_prev;
reg [3:0] S6_expected_prev;
reg [3:0] S7_expected_prev;
reg [3:0] S8_expected_prev;
reg [3:0] S9_expected_prev;
reg [3:0] S10_expected_prev;
reg [3:0] S11_expected_prev;
reg [3:0] S12_expected_prev;
reg [3:0] S13_expected_prev;
reg [3:0] S14_expected_prev;
reg [3:0] S15_expected_prev;

reg [3:0] last_S0_exp;
reg [3:0] last_S1_exp;
reg [3:0] last_S2_exp;
reg [3:0] last_S3_exp;
reg [3:0] last_S4_exp;
reg [3:0] last_S5_exp;
reg [3:0] last_S6_exp;
reg [3:0] last_S7_exp;
reg [3:0] last_S8_exp;
reg [3:0] last_S9_exp;
reg [3:0] last_S10_exp;
reg [3:0] last_S11_exp;
reg [3:0] last_S12_exp;
reg [3:0] last_S13_exp;
reg [3:0] last_S14_exp;
reg [3:0] last_S15_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	S0_prev = S0;
	S1_prev = S1;
	S2_prev = S2;
	S3_prev = S3;
	S4_prev = S4;
	S5_prev = S5;
	S6_prev = S6;
	S7_prev = S7;
	S8_prev = S8;
	S9_prev = S9;
	S10_prev = S10;
	S11_prev = S11;
	S12_prev = S12;
	S13_prev = S13;
	S14_prev = S14;
	S15_prev = S15;
end

// update expected /o prevs

always @(trigger)
begin
	S0_expected_prev = S0_expected;
	S1_expected_prev = S1_expected;
	S2_expected_prev = S2_expected;
	S3_expected_prev = S3_expected;
	S4_expected_prev = S4_expected;
	S5_expected_prev = S5_expected;
	S6_expected_prev = S6_expected;
	S7_expected_prev = S7_expected;
	S8_expected_prev = S8_expected;
	S9_expected_prev = S9_expected;
	S10_expected_prev = S10_expected;
	S11_expected_prev = S11_expected;
	S12_expected_prev = S12_expected;
	S13_expected_prev = S13_expected;
	S14_expected_prev = S14_expected;
	S15_expected_prev = S15_expected;
end


// expected S0[ 3 ]
initial
begin
	S0_expected[3] = 1'bX;
end 
// expected S0[ 2 ]
initial
begin
	S0_expected[2] = 1'bX;
end 
// expected S0[ 1 ]
initial
begin
	S0_expected[1] = 1'bX;
end 
// expected S0[ 0 ]
initial
begin
	S0_expected[0] = 1'bX;
end 
// expected S1[ 3 ]
initial
begin
	S1_expected[3] = 1'bX;
end 
// expected S1[ 2 ]
initial
begin
	S1_expected[2] = 1'bX;
end 
// expected S1[ 1 ]
initial
begin
	S1_expected[1] = 1'bX;
end 
// expected S1[ 0 ]
initial
begin
	S1_expected[0] = 1'bX;
end 
// expected S2[ 3 ]
initial
begin
	S2_expected[3] = 1'bX;
end 
// expected S2[ 2 ]
initial
begin
	S2_expected[2] = 1'bX;
end 
// expected S2[ 1 ]
initial
begin
	S2_expected[1] = 1'bX;
end 
// expected S2[ 0 ]
initial
begin
	S2_expected[0] = 1'bX;
end 
// expected S3[ 3 ]
initial
begin
	S3_expected[3] = 1'bX;
end 
// expected S3[ 2 ]
initial
begin
	S3_expected[2] = 1'bX;
end 
// expected S3[ 1 ]
initial
begin
	S3_expected[1] = 1'bX;
end 
// expected S3[ 0 ]
initial
begin
	S3_expected[0] = 1'bX;
end 
// expected S4[ 3 ]
initial
begin
	S4_expected[3] = 1'bX;
end 
// expected S4[ 2 ]
initial
begin
	S4_expected[2] = 1'bX;
end 
// expected S4[ 1 ]
initial
begin
	S4_expected[1] = 1'bX;
end 
// expected S4[ 0 ]
initial
begin
	S4_expected[0] = 1'bX;
end 
// expected S5[ 3 ]
initial
begin
	S5_expected[3] = 1'bX;
end 
// expected S5[ 2 ]
initial
begin
	S5_expected[2] = 1'bX;
end 
// expected S5[ 1 ]
initial
begin
	S5_expected[1] = 1'bX;
end 
// expected S5[ 0 ]
initial
begin
	S5_expected[0] = 1'bX;
end 
// expected S6[ 3 ]
initial
begin
	S6_expected[3] = 1'bX;
end 
// expected S6[ 2 ]
initial
begin
	S6_expected[2] = 1'bX;
end 
// expected S6[ 1 ]
initial
begin
	S6_expected[1] = 1'bX;
end 
// expected S6[ 0 ]
initial
begin
	S6_expected[0] = 1'bX;
end 
// expected S7[ 3 ]
initial
begin
	S7_expected[3] = 1'bX;
end 
// expected S7[ 2 ]
initial
begin
	S7_expected[2] = 1'bX;
end 
// expected S7[ 1 ]
initial
begin
	S7_expected[1] = 1'bX;
end 
// expected S7[ 0 ]
initial
begin
	S7_expected[0] = 1'bX;
end 
// expected S8[ 3 ]
initial
begin
	S8_expected[3] = 1'bX;
end 
// expected S8[ 2 ]
initial
begin
	S8_expected[2] = 1'bX;
end 
// expected S8[ 1 ]
initial
begin
	S8_expected[1] = 1'bX;
end 
// expected S8[ 0 ]
initial
begin
	S8_expected[0] = 1'bX;
end 
// expected S9[ 3 ]
initial
begin
	S9_expected[3] = 1'bX;
end 
// expected S9[ 2 ]
initial
begin
	S9_expected[2] = 1'bX;
end 
// expected S9[ 1 ]
initial
begin
	S9_expected[1] = 1'bX;
end 
// expected S9[ 0 ]
initial
begin
	S9_expected[0] = 1'bX;
end 
// expected S10[ 3 ]
initial
begin
	S10_expected[3] = 1'bX;
end 
// expected S10[ 2 ]
initial
begin
	S10_expected[2] = 1'bX;
end 
// expected S10[ 1 ]
initial
begin
	S10_expected[1] = 1'bX;
end 
// expected S10[ 0 ]
initial
begin
	S10_expected[0] = 1'bX;
end 
// expected S11[ 3 ]
initial
begin
	S11_expected[3] = 1'bX;
end 
// expected S11[ 2 ]
initial
begin
	S11_expected[2] = 1'bX;
end 
// expected S11[ 1 ]
initial
begin
	S11_expected[1] = 1'bX;
end 
// expected S11[ 0 ]
initial
begin
	S11_expected[0] = 1'bX;
end 
// expected S12[ 3 ]
initial
begin
	S12_expected[3] = 1'bX;
end 
// expected S12[ 2 ]
initial
begin
	S12_expected[2] = 1'bX;
end 
// expected S12[ 1 ]
initial
begin
	S12_expected[1] = 1'bX;
end 
// expected S12[ 0 ]
initial
begin
	S12_expected[0] = 1'bX;
end 
// expected S13[ 3 ]
initial
begin
	S13_expected[3] = 1'bX;
end 
// expected S13[ 2 ]
initial
begin
	S13_expected[2] = 1'bX;
end 
// expected S13[ 1 ]
initial
begin
	S13_expected[1] = 1'bX;
end 
// expected S13[ 0 ]
initial
begin
	S13_expected[0] = 1'bX;
end 
// expected S14[ 3 ]
initial
begin
	S14_expected[3] = 1'bX;
end 
// expected S14[ 2 ]
initial
begin
	S14_expected[2] = 1'bX;
end 
// expected S14[ 1 ]
initial
begin
	S14_expected[1] = 1'bX;
end 
// expected S14[ 0 ]
initial
begin
	S14_expected[0] = 1'bX;
end 
// expected S15[ 3 ]
initial
begin
	S15_expected[3] = 1'bX;
end 
// expected S15[ 2 ]
initial
begin
	S15_expected[2] = 1'bX;
end 
// expected S15[ 1 ]
initial
begin
	S15_expected[1] = 1'bX;
end 
// expected S15[ 0 ]
initial
begin
	S15_expected[0] = 1'bX;
end 
// generate trigger
always @(S0_expected or S0 or S1_expected or S1 or S2_expected or S2 or S3_expected or S3 or S4_expected or S4 or S5_expected or S5 or S6_expected or S6 or S7_expected or S7 or S8_expected or S8 or S9_expected or S9 or S10_expected or S10 or S11_expected or S11 or S12_expected or S12 or S13_expected or S13 or S14_expected or S14 or S15_expected or S15)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected S0 = %b | expected S1 = %b | expected S2 = %b | expected S3 = %b | expected S4 = %b | expected S5 = %b | expected S6 = %b | expected S7 = %b | expected S8 = %b | expected S9 = %b | expected S10 = %b | expected S11 = %b | expected S12 = %b | expected S13 = %b | expected S14 = %b | expected S15 = %b | ",S0_expected_prev,S1_expected_prev,S2_expected_prev,S3_expected_prev,S4_expected_prev,S5_expected_prev,S6_expected_prev,S7_expected_prev,S8_expected_prev,S9_expected_prev,S10_expected_prev,S11_expected_prev,S12_expected_prev,S13_expected_prev,S14_expected_prev,S15_expected_prev);
	$display("| real S0 = %b | real S1 = %b | real S2 = %b | real S3 = %b | real S4 = %b | real S5 = %b | real S6 = %b | real S7 = %b | real S8 = %b | real S9 = %b | real S10 = %b | real S11 = %b | real S12 = %b | real S13 = %b | real S14 = %b | real S15 = %b | ",S0_prev,S1_prev,S2_prev,S3_prev,S4_prev,S5_prev,S6_prev,S7_prev,S8_prev,S9_prev,S10_prev,S11_prev,S12_prev,S13_prev,S14_prev,S15_prev);
`endif
	if (
		( S0_expected_prev[0] !== 1'bx ) && ( S0_prev[0] !== S0_expected_prev[0] )
		&& ((S0_expected_prev[0] !== last_S0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S0_exp[0] = S0_expected_prev[0];
	end
	if (
		( S0_expected_prev[1] !== 1'bx ) && ( S0_prev[1] !== S0_expected_prev[1] )
		&& ((S0_expected_prev[1] !== last_S0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S0_exp[1] = S0_expected_prev[1];
	end
	if (
		( S0_expected_prev[2] !== 1'bx ) && ( S0_prev[2] !== S0_expected_prev[2] )
		&& ((S0_expected_prev[2] !== last_S0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S0_exp[2] = S0_expected_prev[2];
	end
	if (
		( S0_expected_prev[3] !== 1'bx ) && ( S0_prev[3] !== S0_expected_prev[3] )
		&& ((S0_expected_prev[3] !== last_S0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S0_exp[3] = S0_expected_prev[3];
	end
	if (
		( S1_expected_prev[0] !== 1'bx ) && ( S1_prev[0] !== S1_expected_prev[0] )
		&& ((S1_expected_prev[0] !== last_S1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S1_exp[0] = S1_expected_prev[0];
	end
	if (
		( S1_expected_prev[1] !== 1'bx ) && ( S1_prev[1] !== S1_expected_prev[1] )
		&& ((S1_expected_prev[1] !== last_S1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S1_exp[1] = S1_expected_prev[1];
	end
	if (
		( S1_expected_prev[2] !== 1'bx ) && ( S1_prev[2] !== S1_expected_prev[2] )
		&& ((S1_expected_prev[2] !== last_S1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S1_exp[2] = S1_expected_prev[2];
	end
	if (
		( S1_expected_prev[3] !== 1'bx ) && ( S1_prev[3] !== S1_expected_prev[3] )
		&& ((S1_expected_prev[3] !== last_S1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S1_exp[3] = S1_expected_prev[3];
	end
	if (
		( S2_expected_prev[0] !== 1'bx ) && ( S2_prev[0] !== S2_expected_prev[0] )
		&& ((S2_expected_prev[0] !== last_S2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S2_exp[0] = S2_expected_prev[0];
	end
	if (
		( S2_expected_prev[1] !== 1'bx ) && ( S2_prev[1] !== S2_expected_prev[1] )
		&& ((S2_expected_prev[1] !== last_S2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S2_exp[1] = S2_expected_prev[1];
	end
	if (
		( S2_expected_prev[2] !== 1'bx ) && ( S2_prev[2] !== S2_expected_prev[2] )
		&& ((S2_expected_prev[2] !== last_S2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S2_exp[2] = S2_expected_prev[2];
	end
	if (
		( S2_expected_prev[3] !== 1'bx ) && ( S2_prev[3] !== S2_expected_prev[3] )
		&& ((S2_expected_prev[3] !== last_S2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S2_exp[3] = S2_expected_prev[3];
	end
	if (
		( S3_expected_prev[0] !== 1'bx ) && ( S3_prev[0] !== S3_expected_prev[0] )
		&& ((S3_expected_prev[0] !== last_S3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S3_expected_prev);
		$display ("     Real value = %b", S3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_S3_exp[0] = S3_expected_prev[0];
	end
	if (
		( S3_expected_prev[1] !== 1'bx ) && ( S3_prev[1] !== S3_expected_prev[1] )
		&& ((S3_expected_prev[1] !== last_S3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S3_expected_prev);
		$display ("     Real value = %b", S3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_S3_exp[1] = S3_expected_prev[1];
	end
	if (
		( S3_expected_prev[2] !== 1'bx ) && ( S3_prev[2] !== S3_expected_prev[2] )
		&& ((S3_expected_prev[2] !== last_S3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S3_expected_prev);
		$display ("     Real value = %b", S3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_S3_exp[2] = S3_expected_prev[2];
	end
	if (
		( S3_expected_prev[3] !== 1'bx ) && ( S3_prev[3] !== S3_expected_prev[3] )
		&& ((S3_expected_prev[3] !== last_S3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S3_expected_prev);
		$display ("     Real value = %b", S3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_S3_exp[3] = S3_expected_prev[3];
	end
	if (
		( S4_expected_prev[0] !== 1'bx ) && ( S4_prev[0] !== S4_expected_prev[0] )
		&& ((S4_expected_prev[0] !== last_S4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S4_expected_prev);
		$display ("     Real value = %b", S4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S4_exp[0] = S4_expected_prev[0];
	end
	if (
		( S4_expected_prev[1] !== 1'bx ) && ( S4_prev[1] !== S4_expected_prev[1] )
		&& ((S4_expected_prev[1] !== last_S4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S4_expected_prev);
		$display ("     Real value = %b", S4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S4_exp[1] = S4_expected_prev[1];
	end
	if (
		( S4_expected_prev[2] !== 1'bx ) && ( S4_prev[2] !== S4_expected_prev[2] )
		&& ((S4_expected_prev[2] !== last_S4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S4_expected_prev);
		$display ("     Real value = %b", S4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S4_exp[2] = S4_expected_prev[2];
	end
	if (
		( S4_expected_prev[3] !== 1'bx ) && ( S4_prev[3] !== S4_expected_prev[3] )
		&& ((S4_expected_prev[3] !== last_S4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S4_expected_prev);
		$display ("     Real value = %b", S4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S4_exp[3] = S4_expected_prev[3];
	end
	if (
		( S5_expected_prev[0] !== 1'bx ) && ( S5_prev[0] !== S5_expected_prev[0] )
		&& ((S5_expected_prev[0] !== last_S5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S5_expected_prev);
		$display ("     Real value = %b", S5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_S5_exp[0] = S5_expected_prev[0];
	end
	if (
		( S5_expected_prev[1] !== 1'bx ) && ( S5_prev[1] !== S5_expected_prev[1] )
		&& ((S5_expected_prev[1] !== last_S5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S5_expected_prev);
		$display ("     Real value = %b", S5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_S5_exp[1] = S5_expected_prev[1];
	end
	if (
		( S5_expected_prev[2] !== 1'bx ) && ( S5_prev[2] !== S5_expected_prev[2] )
		&& ((S5_expected_prev[2] !== last_S5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S5_expected_prev);
		$display ("     Real value = %b", S5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_S5_exp[2] = S5_expected_prev[2];
	end
	if (
		( S5_expected_prev[3] !== 1'bx ) && ( S5_prev[3] !== S5_expected_prev[3] )
		&& ((S5_expected_prev[3] !== last_S5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S5_expected_prev);
		$display ("     Real value = %b", S5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_S5_exp[3] = S5_expected_prev[3];
	end
	if (
		( S6_expected_prev[0] !== 1'bx ) && ( S6_prev[0] !== S6_expected_prev[0] )
		&& ((S6_expected_prev[0] !== last_S6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S6_expected_prev);
		$display ("     Real value = %b", S6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_S6_exp[0] = S6_expected_prev[0];
	end
	if (
		( S6_expected_prev[1] !== 1'bx ) && ( S6_prev[1] !== S6_expected_prev[1] )
		&& ((S6_expected_prev[1] !== last_S6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S6_expected_prev);
		$display ("     Real value = %b", S6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_S6_exp[1] = S6_expected_prev[1];
	end
	if (
		( S6_expected_prev[2] !== 1'bx ) && ( S6_prev[2] !== S6_expected_prev[2] )
		&& ((S6_expected_prev[2] !== last_S6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S6_expected_prev);
		$display ("     Real value = %b", S6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_S6_exp[2] = S6_expected_prev[2];
	end
	if (
		( S6_expected_prev[3] !== 1'bx ) && ( S6_prev[3] !== S6_expected_prev[3] )
		&& ((S6_expected_prev[3] !== last_S6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S6_expected_prev);
		$display ("     Real value = %b", S6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_S6_exp[3] = S6_expected_prev[3];
	end
	if (
		( S7_expected_prev[0] !== 1'bx ) && ( S7_prev[0] !== S7_expected_prev[0] )
		&& ((S7_expected_prev[0] !== last_S7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S7_expected_prev);
		$display ("     Real value = %b", S7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_S7_exp[0] = S7_expected_prev[0];
	end
	if (
		( S7_expected_prev[1] !== 1'bx ) && ( S7_prev[1] !== S7_expected_prev[1] )
		&& ((S7_expected_prev[1] !== last_S7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S7_expected_prev);
		$display ("     Real value = %b", S7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_S7_exp[1] = S7_expected_prev[1];
	end
	if (
		( S7_expected_prev[2] !== 1'bx ) && ( S7_prev[2] !== S7_expected_prev[2] )
		&& ((S7_expected_prev[2] !== last_S7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S7_expected_prev);
		$display ("     Real value = %b", S7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_S7_exp[2] = S7_expected_prev[2];
	end
	if (
		( S7_expected_prev[3] !== 1'bx ) && ( S7_prev[3] !== S7_expected_prev[3] )
		&& ((S7_expected_prev[3] !== last_S7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S7_expected_prev);
		$display ("     Real value = %b", S7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_S7_exp[3] = S7_expected_prev[3];
	end
	if (
		( S8_expected_prev[0] !== 1'bx ) && ( S8_prev[0] !== S8_expected_prev[0] )
		&& ((S8_expected_prev[0] !== last_S8_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S8_expected_prev);
		$display ("     Real value = %b", S8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S8_exp[0] = S8_expected_prev[0];
	end
	if (
		( S8_expected_prev[1] !== 1'bx ) && ( S8_prev[1] !== S8_expected_prev[1] )
		&& ((S8_expected_prev[1] !== last_S8_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S8_expected_prev);
		$display ("     Real value = %b", S8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S8_exp[1] = S8_expected_prev[1];
	end
	if (
		( S8_expected_prev[2] !== 1'bx ) && ( S8_prev[2] !== S8_expected_prev[2] )
		&& ((S8_expected_prev[2] !== last_S8_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S8_expected_prev);
		$display ("     Real value = %b", S8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S8_exp[2] = S8_expected_prev[2];
	end
	if (
		( S8_expected_prev[3] !== 1'bx ) && ( S8_prev[3] !== S8_expected_prev[3] )
		&& ((S8_expected_prev[3] !== last_S8_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S8[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S8_expected_prev);
		$display ("     Real value = %b", S8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S8_exp[3] = S8_expected_prev[3];
	end
	if (
		( S9_expected_prev[0] !== 1'bx ) && ( S9_prev[0] !== S9_expected_prev[0] )
		&& ((S9_expected_prev[0] !== last_S9_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S9[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S9_expected_prev);
		$display ("     Real value = %b", S9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S9_exp[0] = S9_expected_prev[0];
	end
	if (
		( S9_expected_prev[1] !== 1'bx ) && ( S9_prev[1] !== S9_expected_prev[1] )
		&& ((S9_expected_prev[1] !== last_S9_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S9[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S9_expected_prev);
		$display ("     Real value = %b", S9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S9_exp[1] = S9_expected_prev[1];
	end
	if (
		( S9_expected_prev[2] !== 1'bx ) && ( S9_prev[2] !== S9_expected_prev[2] )
		&& ((S9_expected_prev[2] !== last_S9_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S9[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S9_expected_prev);
		$display ("     Real value = %b", S9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S9_exp[2] = S9_expected_prev[2];
	end
	if (
		( S9_expected_prev[3] !== 1'bx ) && ( S9_prev[3] !== S9_expected_prev[3] )
		&& ((S9_expected_prev[3] !== last_S9_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S9[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S9_expected_prev);
		$display ("     Real value = %b", S9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S9_exp[3] = S9_expected_prev[3];
	end
	if (
		( S10_expected_prev[0] !== 1'bx ) && ( S10_prev[0] !== S10_expected_prev[0] )
		&& ((S10_expected_prev[0] !== last_S10_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S10[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S10_expected_prev);
		$display ("     Real value = %b", S10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_S10_exp[0] = S10_expected_prev[0];
	end
	if (
		( S10_expected_prev[1] !== 1'bx ) && ( S10_prev[1] !== S10_expected_prev[1] )
		&& ((S10_expected_prev[1] !== last_S10_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S10[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S10_expected_prev);
		$display ("     Real value = %b", S10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_S10_exp[1] = S10_expected_prev[1];
	end
	if (
		( S10_expected_prev[2] !== 1'bx ) && ( S10_prev[2] !== S10_expected_prev[2] )
		&& ((S10_expected_prev[2] !== last_S10_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S10[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S10_expected_prev);
		$display ("     Real value = %b", S10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_S10_exp[2] = S10_expected_prev[2];
	end
	if (
		( S10_expected_prev[3] !== 1'bx ) && ( S10_prev[3] !== S10_expected_prev[3] )
		&& ((S10_expected_prev[3] !== last_S10_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S10[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S10_expected_prev);
		$display ("     Real value = %b", S10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_S10_exp[3] = S10_expected_prev[3];
	end
	if (
		( S11_expected_prev[0] !== 1'bx ) && ( S11_prev[0] !== S11_expected_prev[0] )
		&& ((S11_expected_prev[0] !== last_S11_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S11[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S11_expected_prev);
		$display ("     Real value = %b", S11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_S11_exp[0] = S11_expected_prev[0];
	end
	if (
		( S11_expected_prev[1] !== 1'bx ) && ( S11_prev[1] !== S11_expected_prev[1] )
		&& ((S11_expected_prev[1] !== last_S11_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S11[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S11_expected_prev);
		$display ("     Real value = %b", S11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_S11_exp[1] = S11_expected_prev[1];
	end
	if (
		( S11_expected_prev[2] !== 1'bx ) && ( S11_prev[2] !== S11_expected_prev[2] )
		&& ((S11_expected_prev[2] !== last_S11_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S11[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S11_expected_prev);
		$display ("     Real value = %b", S11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_S11_exp[2] = S11_expected_prev[2];
	end
	if (
		( S11_expected_prev[3] !== 1'bx ) && ( S11_prev[3] !== S11_expected_prev[3] )
		&& ((S11_expected_prev[3] !== last_S11_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S11[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S11_expected_prev);
		$display ("     Real value = %b", S11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_S11_exp[3] = S11_expected_prev[3];
	end
	if (
		( S12_expected_prev[0] !== 1'bx ) && ( S12_prev[0] !== S12_expected_prev[0] )
		&& ((S12_expected_prev[0] !== last_S12_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S12[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S12_expected_prev);
		$display ("     Real value = %b", S12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_S12_exp[0] = S12_expected_prev[0];
	end
	if (
		( S12_expected_prev[1] !== 1'bx ) && ( S12_prev[1] !== S12_expected_prev[1] )
		&& ((S12_expected_prev[1] !== last_S12_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S12[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S12_expected_prev);
		$display ("     Real value = %b", S12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_S12_exp[1] = S12_expected_prev[1];
	end
	if (
		( S12_expected_prev[2] !== 1'bx ) && ( S12_prev[2] !== S12_expected_prev[2] )
		&& ((S12_expected_prev[2] !== last_S12_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S12[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S12_expected_prev);
		$display ("     Real value = %b", S12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_S12_exp[2] = S12_expected_prev[2];
	end
	if (
		( S12_expected_prev[3] !== 1'bx ) && ( S12_prev[3] !== S12_expected_prev[3] )
		&& ((S12_expected_prev[3] !== last_S12_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S12[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S12_expected_prev);
		$display ("     Real value = %b", S12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_S12_exp[3] = S12_expected_prev[3];
	end
	if (
		( S13_expected_prev[0] !== 1'bx ) && ( S13_prev[0] !== S13_expected_prev[0] )
		&& ((S13_expected_prev[0] !== last_S13_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S13[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S13_expected_prev);
		$display ("     Real value = %b", S13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_S13_exp[0] = S13_expected_prev[0];
	end
	if (
		( S13_expected_prev[1] !== 1'bx ) && ( S13_prev[1] !== S13_expected_prev[1] )
		&& ((S13_expected_prev[1] !== last_S13_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S13[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S13_expected_prev);
		$display ("     Real value = %b", S13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_S13_exp[1] = S13_expected_prev[1];
	end
	if (
		( S13_expected_prev[2] !== 1'bx ) && ( S13_prev[2] !== S13_expected_prev[2] )
		&& ((S13_expected_prev[2] !== last_S13_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S13[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S13_expected_prev);
		$display ("     Real value = %b", S13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_S13_exp[2] = S13_expected_prev[2];
	end
	if (
		( S13_expected_prev[3] !== 1'bx ) && ( S13_prev[3] !== S13_expected_prev[3] )
		&& ((S13_expected_prev[3] !== last_S13_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S13[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S13_expected_prev);
		$display ("     Real value = %b", S13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_S13_exp[3] = S13_expected_prev[3];
	end
	if (
		( S14_expected_prev[0] !== 1'bx ) && ( S14_prev[0] !== S14_expected_prev[0] )
		&& ((S14_expected_prev[0] !== last_S14_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S14[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S14_expected_prev);
		$display ("     Real value = %b", S14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_S14_exp[0] = S14_expected_prev[0];
	end
	if (
		( S14_expected_prev[1] !== 1'bx ) && ( S14_prev[1] !== S14_expected_prev[1] )
		&& ((S14_expected_prev[1] !== last_S14_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S14[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S14_expected_prev);
		$display ("     Real value = %b", S14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_S14_exp[1] = S14_expected_prev[1];
	end
	if (
		( S14_expected_prev[2] !== 1'bx ) && ( S14_prev[2] !== S14_expected_prev[2] )
		&& ((S14_expected_prev[2] !== last_S14_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S14[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S14_expected_prev);
		$display ("     Real value = %b", S14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_S14_exp[2] = S14_expected_prev[2];
	end
	if (
		( S14_expected_prev[3] !== 1'bx ) && ( S14_prev[3] !== S14_expected_prev[3] )
		&& ((S14_expected_prev[3] !== last_S14_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S14[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S14_expected_prev);
		$display ("     Real value = %b", S14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_S14_exp[3] = S14_expected_prev[3];
	end
	if (
		( S15_expected_prev[0] !== 1'bx ) && ( S15_prev[0] !== S15_expected_prev[0] )
		&& ((S15_expected_prev[0] !== last_S15_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S15[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S15_expected_prev);
		$display ("     Real value = %b", S15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_S15_exp[0] = S15_expected_prev[0];
	end
	if (
		( S15_expected_prev[1] !== 1'bx ) && ( S15_prev[1] !== S15_expected_prev[1] )
		&& ((S15_expected_prev[1] !== last_S15_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S15[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S15_expected_prev);
		$display ("     Real value = %b", S15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_S15_exp[1] = S15_expected_prev[1];
	end
	if (
		( S15_expected_prev[2] !== 1'bx ) && ( S15_prev[2] !== S15_expected_prev[2] )
		&& ((S15_expected_prev[2] !== last_S15_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S15[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S15_expected_prev);
		$display ("     Real value = %b", S15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_S15_exp[2] = S15_expected_prev[2];
	end
	if (
		( S15_expected_prev[3] !== 1'bx ) && ( S15_prev[3] !== S15_expected_prev[3] )
		&& ((S15_expected_prev[3] !== last_S15_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S15[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S15_expected_prev);
		$display ("     Real value = %b", S15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_S15_exp[3] = S15_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module hadamard_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg enable;
reg reset;
reg [3:0] W0;
reg [3:0] W1;
reg [3:0] W2;
reg [3:0] W3;
reg [3:0] W4;
reg [3:0] W5;
reg [3:0] W6;
reg [3:0] W7;
reg [3:0] W8;
reg [3:0] W9;
reg [3:0] W10;
reg [3:0] W11;
reg [3:0] W12;
reg [3:0] W13;
reg [3:0] W14;
reg [3:0] W15;
// wires                                               
wire [3:0] S0;
wire [3:0] S1;
wire [3:0] S2;
wire [3:0] S3;
wire [3:0] S4;
wire [3:0] S5;
wire [3:0] S6;
wire [3:0] S7;
wire [3:0] S8;
wire [3:0] S9;
wire [3:0] S10;
wire [3:0] S11;
wire [3:0] S12;
wire [3:0] S13;
wire [3:0] S14;
wire [3:0] S15;

wire sampler;                             

// assign statements (if any)                          
hadamard i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.enable(enable),
	.reset(reset),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.S7(S7),
	.S8(S8),
	.S9(S9),
	.S10(S10),
	.S11(S11),
	.S12(S12),
	.S13(S13),
	.S14(S14),
	.S15(S15),
	.W0(W0),
	.W1(W1),
	.W2(W2),
	.W3(W3),
	.W4(W4),
	.W5(W5),
	.W6(W6),
	.W7(W7),
	.W8(W8),
	.W9(W9),
	.W10(W10),
	.W11(W11),
	.W12(W12),
	.W13(W13),
	.W14(W14),
	.W15(W15)
);

// clock
initial
begin
	clock = 1'b0;
end 

// enable
initial
begin
	enable = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// W0[ 3 ]
initial
begin
	W0[3] = 1'b0;
end 
// W0[ 2 ]
initial
begin
	W0[2] = 1'b0;
end 
// W0[ 1 ]
initial
begin
	W0[1] = 1'b0;
end 
// W0[ 0 ]
initial
begin
	W0[0] = 1'b0;
end 
// W1[ 3 ]
initial
begin
	W1[3] = 1'b0;
end 
// W1[ 2 ]
initial
begin
	W1[2] = 1'b0;
end 
// W1[ 1 ]
initial
begin
	W1[1] = 1'b0;
end 
// W1[ 0 ]
initial
begin
	W1[0] = 1'b0;
end 
// W2[ 3 ]
initial
begin
	W2[3] = 1'b0;
end 
// W2[ 2 ]
initial
begin
	W2[2] = 1'b0;
end 
// W2[ 1 ]
initial
begin
	W2[1] = 1'b0;
end 
// W2[ 0 ]
initial
begin
	W2[0] = 1'b0;
end 
// W3[ 3 ]
initial
begin
	W3[3] = 1'b0;
end 
// W3[ 2 ]
initial
begin
	W3[2] = 1'b0;
end 
// W3[ 1 ]
initial
begin
	W3[1] = 1'b0;
end 
// W3[ 0 ]
initial
begin
	W3[0] = 1'b0;
end 
// W4[ 3 ]
initial
begin
	W4[3] = 1'b0;
end 
// W4[ 2 ]
initial
begin
	W4[2] = 1'b0;
end 
// W4[ 1 ]
initial
begin
	W4[1] = 1'b0;
end 
// W4[ 0 ]
initial
begin
	W4[0] = 1'b0;
end 
// W5[ 3 ]
initial
begin
	W5[3] = 1'b0;
end 
// W5[ 2 ]
initial
begin
	W5[2] = 1'b0;
end 
// W5[ 1 ]
initial
begin
	W5[1] = 1'b0;
end 
// W5[ 0 ]
initial
begin
	W5[0] = 1'b0;
end 
// W6[ 3 ]
initial
begin
	W6[3] = 1'b0;
end 
// W6[ 2 ]
initial
begin
	W6[2] = 1'b0;
end 
// W6[ 1 ]
initial
begin
	W6[1] = 1'b0;
end 
// W6[ 0 ]
initial
begin
	W6[0] = 1'b0;
end 
// W7[ 3 ]
initial
begin
	W7[3] = 1'b0;
end 
// W7[ 2 ]
initial
begin
	W7[2] = 1'b0;
end 
// W7[ 1 ]
initial
begin
	W7[1] = 1'b0;
end 
// W7[ 0 ]
initial
begin
	W7[0] = 1'b0;
end 
// W8[ 3 ]
initial
begin
	W8[3] = 1'b0;
end 
// W8[ 2 ]
initial
begin
	W8[2] = 1'b0;
end 
// W8[ 1 ]
initial
begin
	W8[1] = 1'b0;
end 
// W8[ 0 ]
initial
begin
	W8[0] = 1'b0;
end 
// W9[ 3 ]
initial
begin
	W9[3] = 1'b0;
end 
// W9[ 2 ]
initial
begin
	W9[2] = 1'b0;
end 
// W9[ 1 ]
initial
begin
	W9[1] = 1'b0;
end 
// W9[ 0 ]
initial
begin
	W9[0] = 1'b0;
end 
// W10[ 3 ]
initial
begin
	W10[3] = 1'b0;
end 
// W10[ 2 ]
initial
begin
	W10[2] = 1'b0;
end 
// W10[ 1 ]
initial
begin
	W10[1] = 1'b0;
end 
// W10[ 0 ]
initial
begin
	W10[0] = 1'b0;
end 
// W11[ 3 ]
initial
begin
	W11[3] = 1'b0;
end 
// W11[ 2 ]
initial
begin
	W11[2] = 1'b0;
end 
// W11[ 1 ]
initial
begin
	W11[1] = 1'b0;
end 
// W11[ 0 ]
initial
begin
	W11[0] = 1'b0;
end 
// W12[ 3 ]
initial
begin
	W12[3] = 1'b0;
end 
// W12[ 2 ]
initial
begin
	W12[2] = 1'b0;
end 
// W12[ 1 ]
initial
begin
	W12[1] = 1'b0;
end 
// W12[ 0 ]
initial
begin
	W12[0] = 1'b0;
end 
// W13[ 3 ]
initial
begin
	W13[3] = 1'b0;
end 
// W13[ 2 ]
initial
begin
	W13[2] = 1'b0;
end 
// W13[ 1 ]
initial
begin
	W13[1] = 1'b0;
end 
// W13[ 0 ]
initial
begin
	W13[0] = 1'b0;
end 
// W14[ 3 ]
initial
begin
	W14[3] = 1'b0;
end 
// W14[ 2 ]
initial
begin
	W14[2] = 1'b0;
end 
// W14[ 1 ]
initial
begin
	W14[1] = 1'b0;
end 
// W14[ 0 ]
initial
begin
	W14[0] = 1'b0;
end 
// W15[ 3 ]
initial
begin
	W15[3] = 1'b0;
end 
// W15[ 2 ]
initial
begin
	W15[2] = 1'b0;
end 
// W15[ 1 ]
initial
begin
	W15[1] = 1'b0;
end 
// W15[ 0 ]
initial
begin
	W15[0] = 1'b0;
end 

hadamard_vlg_sample_tst tb_sample (
	.clock(clock),
	.enable(enable),
	.reset(reset),
	.W0(W0),
	.W1(W1),
	.W2(W2),
	.W3(W3),
	.W4(W4),
	.W5(W5),
	.W6(W6),
	.W7(W7),
	.W8(W8),
	.W9(W9),
	.W10(W10),
	.W11(W11),
	.W12(W12),
	.W13(W13),
	.W14(W14),
	.W15(W15),
	.sampler_tx(sampler)
);

hadamard_vlg_check_tst tb_out(
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.S7(S7),
	.S8(S8),
	.S9(S9),
	.S10(S10),
	.S11(S11),
	.S12(S12),
	.S13(S13),
	.S14(S14),
	.S15(S15),
	.sampler_rx(sampler)
);
endmodule

