// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2021 01:18:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    multiplicadorSequencial
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multiplicadorSequencial_vlg_sample_tst(
	clock,
	enable,
	op1,
	op2,
	reset,
	sampler_tx
);
input  clock;
input  enable;
input [7:0] op1;
input [7:0] op2;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or enable or op1 or op2 or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module multiplicadorSequencial_vlg_check_tst (
	estado,
	resultado,
	sampler_rx
);
input [3:0] estado;
input [15:0] resultado;
input sampler_rx;

reg [3:0] estado_expected;
reg [15:0] resultado_expected;

reg [3:0] estado_prev;
reg [15:0] resultado_prev;

reg [3:0] estado_expected_prev;
reg [15:0] resultado_expected_prev;

reg [3:0] last_estado_exp;
reg [15:0] last_resultado_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	estado_prev = estado;
	resultado_prev = resultado;
end

// update expected /o prevs

always @(trigger)
begin
	estado_expected_prev = estado_expected;
	resultado_expected_prev = resultado_expected;
end


// expected resultado[ 15 ]
initial
begin
	resultado_expected[15] = 1'bX;
end 
// expected resultado[ 14 ]
initial
begin
	resultado_expected[14] = 1'bX;
end 
// expected resultado[ 13 ]
initial
begin
	resultado_expected[13] = 1'bX;
end 
// expected resultado[ 12 ]
initial
begin
	resultado_expected[12] = 1'bX;
end 
// expected resultado[ 11 ]
initial
begin
	resultado_expected[11] = 1'bX;
end 
// expected resultado[ 10 ]
initial
begin
	resultado_expected[10] = 1'bX;
end 
// expected resultado[ 9 ]
initial
begin
	resultado_expected[9] = 1'bX;
end 
// expected resultado[ 8 ]
initial
begin
	resultado_expected[8] = 1'bX;
end 
// expected resultado[ 7 ]
initial
begin
	resultado_expected[7] = 1'bX;
end 
// expected resultado[ 6 ]
initial
begin
	resultado_expected[6] = 1'bX;
end 
// expected resultado[ 5 ]
initial
begin
	resultado_expected[5] = 1'bX;
end 
// expected resultado[ 4 ]
initial
begin
	resultado_expected[4] = 1'bX;
end 
// expected resultado[ 3 ]
initial
begin
	resultado_expected[3] = 1'bX;
end 
// expected resultado[ 2 ]
initial
begin
	resultado_expected[2] = 1'bX;
end 
// expected resultado[ 1 ]
initial
begin
	resultado_expected[1] = 1'bX;
end 
// expected resultado[ 0 ]
initial
begin
	resultado_expected[0] = 1'bX;
end 
// expected estado[ 3 ]
initial
begin
	estado_expected[3] = 1'bX;
end 
// expected estado[ 2 ]
initial
begin
	estado_expected[2] = 1'bX;
end 
// expected estado[ 1 ]
initial
begin
	estado_expected[1] = 1'bX;
end 
// expected estado[ 0 ]
initial
begin
	estado_expected[0] = 1'bX;
end 
// generate trigger
always @(estado_expected or estado or resultado_expected or resultado)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected estado = %b | expected resultado = %b | ",estado_expected_prev,resultado_expected_prev);
	$display("| real estado = %b | real resultado = %b | ",estado_prev,resultado_prev);
`endif
	if (
		( estado_expected_prev[0] !== 1'bx ) && ( estado_prev[0] !== estado_expected_prev[0] )
		&& ((estado_expected_prev[0] !== last_estado_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_estado_exp[0] = estado_expected_prev[0];
	end
	if (
		( estado_expected_prev[1] !== 1'bx ) && ( estado_prev[1] !== estado_expected_prev[1] )
		&& ((estado_expected_prev[1] !== last_estado_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_estado_exp[1] = estado_expected_prev[1];
	end
	if (
		( estado_expected_prev[2] !== 1'bx ) && ( estado_prev[2] !== estado_expected_prev[2] )
		&& ((estado_expected_prev[2] !== last_estado_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_estado_exp[2] = estado_expected_prev[2];
	end
	if (
		( estado_expected_prev[3] !== 1'bx ) && ( estado_prev[3] !== estado_expected_prev[3] )
		&& ((estado_expected_prev[3] !== last_estado_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_estado_exp[3] = estado_expected_prev[3];
	end
	if (
		( resultado_expected_prev[0] !== 1'bx ) && ( resultado_prev[0] !== resultado_expected_prev[0] )
		&& ((resultado_expected_prev[0] !== last_resultado_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[0] = resultado_expected_prev[0];
	end
	if (
		( resultado_expected_prev[1] !== 1'bx ) && ( resultado_prev[1] !== resultado_expected_prev[1] )
		&& ((resultado_expected_prev[1] !== last_resultado_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[1] = resultado_expected_prev[1];
	end
	if (
		( resultado_expected_prev[2] !== 1'bx ) && ( resultado_prev[2] !== resultado_expected_prev[2] )
		&& ((resultado_expected_prev[2] !== last_resultado_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[2] = resultado_expected_prev[2];
	end
	if (
		( resultado_expected_prev[3] !== 1'bx ) && ( resultado_prev[3] !== resultado_expected_prev[3] )
		&& ((resultado_expected_prev[3] !== last_resultado_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[3] = resultado_expected_prev[3];
	end
	if (
		( resultado_expected_prev[4] !== 1'bx ) && ( resultado_prev[4] !== resultado_expected_prev[4] )
		&& ((resultado_expected_prev[4] !== last_resultado_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[4] = resultado_expected_prev[4];
	end
	if (
		( resultado_expected_prev[5] !== 1'bx ) && ( resultado_prev[5] !== resultado_expected_prev[5] )
		&& ((resultado_expected_prev[5] !== last_resultado_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[5] = resultado_expected_prev[5];
	end
	if (
		( resultado_expected_prev[6] !== 1'bx ) && ( resultado_prev[6] !== resultado_expected_prev[6] )
		&& ((resultado_expected_prev[6] !== last_resultado_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[6] = resultado_expected_prev[6];
	end
	if (
		( resultado_expected_prev[7] !== 1'bx ) && ( resultado_prev[7] !== resultado_expected_prev[7] )
		&& ((resultado_expected_prev[7] !== last_resultado_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[7] = resultado_expected_prev[7];
	end
	if (
		( resultado_expected_prev[8] !== 1'bx ) && ( resultado_prev[8] !== resultado_expected_prev[8] )
		&& ((resultado_expected_prev[8] !== last_resultado_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[8] = resultado_expected_prev[8];
	end
	if (
		( resultado_expected_prev[9] !== 1'bx ) && ( resultado_prev[9] !== resultado_expected_prev[9] )
		&& ((resultado_expected_prev[9] !== last_resultado_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[9] = resultado_expected_prev[9];
	end
	if (
		( resultado_expected_prev[10] !== 1'bx ) && ( resultado_prev[10] !== resultado_expected_prev[10] )
		&& ((resultado_expected_prev[10] !== last_resultado_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[10] = resultado_expected_prev[10];
	end
	if (
		( resultado_expected_prev[11] !== 1'bx ) && ( resultado_prev[11] !== resultado_expected_prev[11] )
		&& ((resultado_expected_prev[11] !== last_resultado_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[11] = resultado_expected_prev[11];
	end
	if (
		( resultado_expected_prev[12] !== 1'bx ) && ( resultado_prev[12] !== resultado_expected_prev[12] )
		&& ((resultado_expected_prev[12] !== last_resultado_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[12] = resultado_expected_prev[12];
	end
	if (
		( resultado_expected_prev[13] !== 1'bx ) && ( resultado_prev[13] !== resultado_expected_prev[13] )
		&& ((resultado_expected_prev[13] !== last_resultado_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[13] = resultado_expected_prev[13];
	end
	if (
		( resultado_expected_prev[14] !== 1'bx ) && ( resultado_prev[14] !== resultado_expected_prev[14] )
		&& ((resultado_expected_prev[14] !== last_resultado_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[14] = resultado_expected_prev[14];
	end
	if (
		( resultado_expected_prev[15] !== 1'bx ) && ( resultado_prev[15] !== resultado_expected_prev[15] )
		&& ((resultado_expected_prev[15] !== last_resultado_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultado[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultado_expected_prev);
		$display ("     Real value = %b", resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_resultado_exp[15] = resultado_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module multiplicadorSequencial_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg enable;
reg [7:0] op1;
reg [7:0] op2;
reg reset;
// wires                                               
wire [3:0] estado;
wire [15:0] resultado;

wire sampler;                             

// assign statements (if any)                          
multiplicadorSequencial i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.enable(enable),
	.estado(estado),
	.op1(op1),
	.op2(op2),
	.reset(reset),
	.resultado(resultado)
);

// clock
initial
begin
	repeat(58)
	begin
		clock = 1'b0;
		clock = #8500 1'b1;
		# 8500;
	end
	clock = 1'b0;
	clock = #8500 1'b1;
end 

// enable
initial
begin
	enable = 1'b1;
end 
// op1[ 7 ]
initial
begin
	op1[7] = 1'b0;
end 
// op1[ 6 ]
initial
begin
	op1[6] = 1'b0;
	op1[6] = #360000 1'b1;
	op1[6] = #220000 1'b0;
end 
// op1[ 5 ]
initial
begin
	op1[5] = 1'b0;
end 
// op1[ 4 ]
initial
begin
	op1[4] = 1'b0;
end 
// op1[ 3 ]
initial
begin
	op1[3] = 1'b0;
end 
// op1[ 2 ]
initial
begin
	op1[2] = 1'b1;
end 
// op1[ 1 ]
initial
begin
	op1[1] = 1'b0;
	op1[1] = #580000 1'b1;
end 
// op1[ 0 ]
initial
begin
	op1[0] = 1'b1;
end 
// op2[ 7 ]
initial
begin
	op2[7] = 1'b0;
end 
// op2[ 6 ]
initial
begin
	op2[6] = 1'b0;
end 
// op2[ 5 ]
initial
begin
	op2[5] = 1'b0;
end 
// op2[ 4 ]
initial
begin
	op2[4] = 1'b0;
end 
// op2[ 3 ]
initial
begin
	op2[3] = 1'b1;
end 
// op2[ 2 ]
initial
begin
	op2[2] = 1'b0;
end 
// op2[ 1 ]
initial
begin
	op2[1] = 1'b1;
end 
// op2[ 0 ]
initial
begin
	op2[0] = 1'b1;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #30000 1'b0;
end 

multiplicadorSequencial_vlg_sample_tst tb_sample (
	.clock(clock),
	.enable(enable),
	.op1(op1),
	.op2(op2),
	.reset(reset),
	.sampler_tx(sampler)
);

multiplicadorSequencial_vlg_check_tst tb_out(
	.estado(estado),
	.resultado(resultado),
	.sampler_rx(sampler)
);
endmodule

