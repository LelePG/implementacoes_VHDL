// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2021 12:43:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ula_vlg_sample_tst(
	funct,
	opcode,
	rs,
	rt,
	shamt,
	sampler_tx
);
input [5:0] funct;
input [5:0] opcode;
input [31:0] rs;
input [31:0] rt;
input [4:0] shamt;
output sampler_tx;

reg sample;
time current_time;
always @(funct or opcode or rs or rt or shamt)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ula_vlg_check_tst (
	carryOut,
	negativo,
	overflow,
	rd,
	zero,
	sampler_rx
);
input  carryOut;
input  negativo;
input  overflow;
input [31:0] rd;
input  zero;
input sampler_rx;

reg  carryOut_expected;
reg  negativo_expected;
reg  overflow_expected;
reg [31:0] rd_expected;
reg  zero_expected;

reg  carryOut_prev;
reg  negativo_prev;
reg  overflow_prev;
reg [31:0] rd_prev;
reg  zero_prev;

reg  carryOut_expected_prev;
reg  negativo_expected_prev;
reg  overflow_expected_prev;
reg [31:0] rd_expected_prev;
reg  zero_expected_prev;

reg  last_carryOut_exp;
reg  last_negativo_exp;
reg  last_overflow_exp;
reg [31:0] last_rd_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	carryOut_prev = carryOut;
	negativo_prev = negativo;
	overflow_prev = overflow;
	rd_prev = rd;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	carryOut_expected_prev = carryOut_expected;
	negativo_expected_prev = negativo_expected;
	overflow_expected_prev = overflow_expected;
	rd_expected_prev = rd_expected;
	zero_expected_prev = zero_expected;
end



// expected carryOut
initial
begin
	carryOut_expected = 1'bX;
end 

// expected negativo
initial
begin
	negativo_expected = 1'bX;
end 

// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 
// expected rd[ 31 ]
initial
begin
	rd_expected[31] = 1'bX;
end 
// expected rd[ 30 ]
initial
begin
	rd_expected[30] = 1'bX;
end 
// expected rd[ 29 ]
initial
begin
	rd_expected[29] = 1'bX;
end 
// expected rd[ 28 ]
initial
begin
	rd_expected[28] = 1'bX;
end 
// expected rd[ 27 ]
initial
begin
	rd_expected[27] = 1'bX;
end 
// expected rd[ 26 ]
initial
begin
	rd_expected[26] = 1'bX;
end 
// expected rd[ 25 ]
initial
begin
	rd_expected[25] = 1'bX;
end 
// expected rd[ 24 ]
initial
begin
	rd_expected[24] = 1'bX;
end 
// expected rd[ 23 ]
initial
begin
	rd_expected[23] = 1'bX;
end 
// expected rd[ 22 ]
initial
begin
	rd_expected[22] = 1'bX;
end 
// expected rd[ 21 ]
initial
begin
	rd_expected[21] = 1'bX;
end 
// expected rd[ 20 ]
initial
begin
	rd_expected[20] = 1'bX;
end 
// expected rd[ 19 ]
initial
begin
	rd_expected[19] = 1'bX;
end 
// expected rd[ 18 ]
initial
begin
	rd_expected[18] = 1'bX;
end 
// expected rd[ 17 ]
initial
begin
	rd_expected[17] = 1'bX;
end 
// expected rd[ 16 ]
initial
begin
	rd_expected[16] = 1'bX;
end 
// expected rd[ 15 ]
initial
begin
	rd_expected[15] = 1'bX;
end 
// expected rd[ 14 ]
initial
begin
	rd_expected[14] = 1'bX;
end 
// expected rd[ 13 ]
initial
begin
	rd_expected[13] = 1'bX;
end 
// expected rd[ 12 ]
initial
begin
	rd_expected[12] = 1'bX;
end 
// expected rd[ 11 ]
initial
begin
	rd_expected[11] = 1'bX;
end 
// expected rd[ 10 ]
initial
begin
	rd_expected[10] = 1'bX;
end 
// expected rd[ 9 ]
initial
begin
	rd_expected[9] = 1'bX;
end 
// expected rd[ 8 ]
initial
begin
	rd_expected[8] = 1'bX;
end 
// expected rd[ 7 ]
initial
begin
	rd_expected[7] = 1'bX;
end 
// expected rd[ 6 ]
initial
begin
	rd_expected[6] = 1'bX;
end 
// expected rd[ 5 ]
initial
begin
	rd_expected[5] = 1'bX;
end 
// expected rd[ 4 ]
initial
begin
	rd_expected[4] = 1'bX;
end 
// expected rd[ 3 ]
initial
begin
	rd_expected[3] = 1'bX;
end 
// expected rd[ 2 ]
initial
begin
	rd_expected[2] = 1'bX;
end 
// expected rd[ 1 ]
initial
begin
	rd_expected[1] = 1'bX;
end 
// expected rd[ 0 ]
initial
begin
	rd_expected[0] = 1'b0;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
end 
// generate trigger
always @(carryOut_expected or carryOut or negativo_expected or negativo or overflow_expected or overflow or rd_expected or rd or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected carryOut = %b | expected negativo = %b | expected overflow = %b | expected rd = %b | expected zero = %b | ",carryOut_expected_prev,negativo_expected_prev,overflow_expected_prev,rd_expected_prev,zero_expected_prev);
	$display("| real carryOut = %b | real negativo = %b | real overflow = %b | real rd = %b | real zero = %b | ",carryOut_prev,negativo_prev,overflow_prev,rd_prev,zero_prev);
`endif
	if (
		( carryOut_expected_prev !== 1'bx ) && ( carryOut_prev !== carryOut_expected_prev )
		&& ((carryOut_expected_prev !== last_carryOut_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carryOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carryOut_expected_prev);
		$display ("     Real value = %b", carryOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carryOut_exp = carryOut_expected_prev;
	end
	if (
		( negativo_expected_prev !== 1'bx ) && ( negativo_prev !== negativo_expected_prev )
		&& ((negativo_expected_prev !== last_negativo_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port negativo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", negativo_expected_prev);
		$display ("     Real value = %b", negativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_negativo_exp = negativo_expected_prev;
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( rd_expected_prev[0] !== 1'bx ) && ( rd_prev[0] !== rd_expected_prev[0] )
		&& ((rd_expected_prev[0] !== last_rd_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[0] = rd_expected_prev[0];
	end
	if (
		( rd_expected_prev[1] !== 1'bx ) && ( rd_prev[1] !== rd_expected_prev[1] )
		&& ((rd_expected_prev[1] !== last_rd_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[1] = rd_expected_prev[1];
	end
	if (
		( rd_expected_prev[2] !== 1'bx ) && ( rd_prev[2] !== rd_expected_prev[2] )
		&& ((rd_expected_prev[2] !== last_rd_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[2] = rd_expected_prev[2];
	end
	if (
		( rd_expected_prev[3] !== 1'bx ) && ( rd_prev[3] !== rd_expected_prev[3] )
		&& ((rd_expected_prev[3] !== last_rd_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[3] = rd_expected_prev[3];
	end
	if (
		( rd_expected_prev[4] !== 1'bx ) && ( rd_prev[4] !== rd_expected_prev[4] )
		&& ((rd_expected_prev[4] !== last_rd_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[4] = rd_expected_prev[4];
	end
	if (
		( rd_expected_prev[5] !== 1'bx ) && ( rd_prev[5] !== rd_expected_prev[5] )
		&& ((rd_expected_prev[5] !== last_rd_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[5] = rd_expected_prev[5];
	end
	if (
		( rd_expected_prev[6] !== 1'bx ) && ( rd_prev[6] !== rd_expected_prev[6] )
		&& ((rd_expected_prev[6] !== last_rd_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[6] = rd_expected_prev[6];
	end
	if (
		( rd_expected_prev[7] !== 1'bx ) && ( rd_prev[7] !== rd_expected_prev[7] )
		&& ((rd_expected_prev[7] !== last_rd_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[7] = rd_expected_prev[7];
	end
	if (
		( rd_expected_prev[8] !== 1'bx ) && ( rd_prev[8] !== rd_expected_prev[8] )
		&& ((rd_expected_prev[8] !== last_rd_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[8] = rd_expected_prev[8];
	end
	if (
		( rd_expected_prev[9] !== 1'bx ) && ( rd_prev[9] !== rd_expected_prev[9] )
		&& ((rd_expected_prev[9] !== last_rd_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[9] = rd_expected_prev[9];
	end
	if (
		( rd_expected_prev[10] !== 1'bx ) && ( rd_prev[10] !== rd_expected_prev[10] )
		&& ((rd_expected_prev[10] !== last_rd_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[10] = rd_expected_prev[10];
	end
	if (
		( rd_expected_prev[11] !== 1'bx ) && ( rd_prev[11] !== rd_expected_prev[11] )
		&& ((rd_expected_prev[11] !== last_rd_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[11] = rd_expected_prev[11];
	end
	if (
		( rd_expected_prev[12] !== 1'bx ) && ( rd_prev[12] !== rd_expected_prev[12] )
		&& ((rd_expected_prev[12] !== last_rd_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[12] = rd_expected_prev[12];
	end
	if (
		( rd_expected_prev[13] !== 1'bx ) && ( rd_prev[13] !== rd_expected_prev[13] )
		&& ((rd_expected_prev[13] !== last_rd_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[13] = rd_expected_prev[13];
	end
	if (
		( rd_expected_prev[14] !== 1'bx ) && ( rd_prev[14] !== rd_expected_prev[14] )
		&& ((rd_expected_prev[14] !== last_rd_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[14] = rd_expected_prev[14];
	end
	if (
		( rd_expected_prev[15] !== 1'bx ) && ( rd_prev[15] !== rd_expected_prev[15] )
		&& ((rd_expected_prev[15] !== last_rd_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[15] = rd_expected_prev[15];
	end
	if (
		( rd_expected_prev[16] !== 1'bx ) && ( rd_prev[16] !== rd_expected_prev[16] )
		&& ((rd_expected_prev[16] !== last_rd_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[16] = rd_expected_prev[16];
	end
	if (
		( rd_expected_prev[17] !== 1'bx ) && ( rd_prev[17] !== rd_expected_prev[17] )
		&& ((rd_expected_prev[17] !== last_rd_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[17] = rd_expected_prev[17];
	end
	if (
		( rd_expected_prev[18] !== 1'bx ) && ( rd_prev[18] !== rd_expected_prev[18] )
		&& ((rd_expected_prev[18] !== last_rd_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[18] = rd_expected_prev[18];
	end
	if (
		( rd_expected_prev[19] !== 1'bx ) && ( rd_prev[19] !== rd_expected_prev[19] )
		&& ((rd_expected_prev[19] !== last_rd_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[19] = rd_expected_prev[19];
	end
	if (
		( rd_expected_prev[20] !== 1'bx ) && ( rd_prev[20] !== rd_expected_prev[20] )
		&& ((rd_expected_prev[20] !== last_rd_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[20] = rd_expected_prev[20];
	end
	if (
		( rd_expected_prev[21] !== 1'bx ) && ( rd_prev[21] !== rd_expected_prev[21] )
		&& ((rd_expected_prev[21] !== last_rd_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[21] = rd_expected_prev[21];
	end
	if (
		( rd_expected_prev[22] !== 1'bx ) && ( rd_prev[22] !== rd_expected_prev[22] )
		&& ((rd_expected_prev[22] !== last_rd_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[22] = rd_expected_prev[22];
	end
	if (
		( rd_expected_prev[23] !== 1'bx ) && ( rd_prev[23] !== rd_expected_prev[23] )
		&& ((rd_expected_prev[23] !== last_rd_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[23] = rd_expected_prev[23];
	end
	if (
		( rd_expected_prev[24] !== 1'bx ) && ( rd_prev[24] !== rd_expected_prev[24] )
		&& ((rd_expected_prev[24] !== last_rd_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[24] = rd_expected_prev[24];
	end
	if (
		( rd_expected_prev[25] !== 1'bx ) && ( rd_prev[25] !== rd_expected_prev[25] )
		&& ((rd_expected_prev[25] !== last_rd_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[25] = rd_expected_prev[25];
	end
	if (
		( rd_expected_prev[26] !== 1'bx ) && ( rd_prev[26] !== rd_expected_prev[26] )
		&& ((rd_expected_prev[26] !== last_rd_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[26] = rd_expected_prev[26];
	end
	if (
		( rd_expected_prev[27] !== 1'bx ) && ( rd_prev[27] !== rd_expected_prev[27] )
		&& ((rd_expected_prev[27] !== last_rd_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[27] = rd_expected_prev[27];
	end
	if (
		( rd_expected_prev[28] !== 1'bx ) && ( rd_prev[28] !== rd_expected_prev[28] )
		&& ((rd_expected_prev[28] !== last_rd_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[28] = rd_expected_prev[28];
	end
	if (
		( rd_expected_prev[29] !== 1'bx ) && ( rd_prev[29] !== rd_expected_prev[29] )
		&& ((rd_expected_prev[29] !== last_rd_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[29] = rd_expected_prev[29];
	end
	if (
		( rd_expected_prev[30] !== 1'bx ) && ( rd_prev[30] !== rd_expected_prev[30] )
		&& ((rd_expected_prev[30] !== last_rd_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[30] = rd_expected_prev[30];
	end
	if (
		( rd_expected_prev[31] !== 1'bx ) && ( rd_prev[31] !== rd_expected_prev[31] )
		&& ((rd_expected_prev[31] !== last_rd_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_exp[31] = rd_expected_prev[31];
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] funct;
reg [5:0] opcode;
reg [31:0] rs;
reg [31:0] rt;
reg [4:0] shamt;
// wires                                               
wire carryOut;
wire negativo;
wire overflow;
wire [31:0] rd;
wire zero;

wire sampler;                             

// assign statements (if any)                          
ula i1 (
// port map - connection between master ports and signals/registers   
	.carryOut(carryOut),
	.funct(funct),
	.negativo(negativo),
	.opcode(opcode),
	.overflow(overflow),
	.rd(rd),
	.rs(rs),
	.rt(rt),
	.shamt(shamt),
	.zero(zero)
);
// funct[ 5 ]
initial
begin
	funct[5] = 1'b0;
	funct[5] = #590000 1'b1;
	funct[5] = #120000 1'bX;
end 
// funct[ 4 ]
initial
begin
	funct[4] = 1'b0;
	funct[4] = #500000 1'b1;
	funct[4] = #90000 1'b0;
	funct[4] = #120000 1'bX;
end 
// funct[ 3 ]
initial
begin
	funct[3] = 1'b0;
	funct[3] = #380000 1'b1;
	funct[3] = #120000 1'b0;
	funct[3] = #210000 1'bX;
end 
// funct[ 2 ]
initial
begin
	funct[2] = 1'b0;
	funct[2] = #280000 1'b1;
	funct[2] = #100000 1'b0;
	funct[2] = #330000 1'bX;
end 
// funct[ 1 ]
initial
begin
	funct[1] = 1'b0;
	funct[1] = #150000 1'b1;
	funct[1] = #130000 1'b0;
	funct[1] = #430000 1'bX;
end 
// funct[ 0 ]
initial
begin
	funct[0] = 1'b1;
	funct[0] = #150000 1'b0;
	funct[0] = #560000 1'bX;
end 
// opcode[ 5 ]
initial
begin
	opcode[5] = 1'b0;
end 
// opcode[ 4 ]
initial
begin
	opcode[4] = 1'b0;
end 
// opcode[ 3 ]
initial
begin
	opcode[3] = 1'b0;
end 
// opcode[ 2 ]
initial
begin
	opcode[2] = 1'b0;
end 
// opcode[ 1 ]
initial
begin
	opcode[1] = 1'b0;
end 
// opcode[ 0 ]
initial
begin
	opcode[0] = 1'b0;
end 
// rs[ 31 ]
initial
begin
	rs[31] = 1'b0;
end 
// rs[ 30 ]
initial
begin
	rs[30] = 1'b0;
end 
// rs[ 29 ]
initial
begin
	rs[29] = 1'b0;
end 
// rs[ 28 ]
initial
begin
	rs[28] = 1'b0;
end 
// rs[ 27 ]
initial
begin
	rs[27] = 1'b0;
end 
// rs[ 26 ]
initial
begin
	rs[26] = 1'b0;
end 
// rs[ 25 ]
initial
begin
	rs[25] = 1'b0;
end 
// rs[ 24 ]
initial
begin
	rs[24] = 1'b0;
end 
// rs[ 23 ]
initial
begin
	rs[23] = 1'b0;
end 
// rs[ 22 ]
initial
begin
	rs[22] = 1'b0;
end 
// rs[ 21 ]
initial
begin
	rs[21] = 1'b0;
end 
// rs[ 20 ]
initial
begin
	rs[20] = 1'b0;
end 
// rs[ 19 ]
initial
begin
	rs[19] = 1'b0;
end 
// rs[ 18 ]
initial
begin
	rs[18] = 1'b0;
end 
// rs[ 17 ]
initial
begin
	rs[17] = 1'b0;
end 
// rs[ 16 ]
initial
begin
	rs[16] = 1'b0;
end 
// rs[ 15 ]
initial
begin
	rs[15] = 1'b0;
end 
// rs[ 14 ]
initial
begin
	rs[14] = 1'b0;
end 
// rs[ 13 ]
initial
begin
	rs[13] = 1'b0;
end 
// rs[ 12 ]
initial
begin
	rs[12] = 1'b0;
end 
// rs[ 11 ]
initial
begin
	rs[11] = 1'b0;
end 
// rs[ 10 ]
initial
begin
	rs[10] = 1'b0;
end 
// rs[ 9 ]
initial
begin
	rs[9] = 1'b0;
end 
// rs[ 8 ]
initial
begin
	rs[8] = 1'b0;
end 
// rs[ 7 ]
initial
begin
	rs[7] = 1'b0;
end 
// rs[ 6 ]
initial
begin
	rs[6] = 1'b0;
end 
// rs[ 5 ]
initial
begin
	rs[5] = 1'b0;
end 
// rs[ 4 ]
initial
begin
	rs[4] = 1'b0;
end 
// rs[ 3 ]
initial
begin
	rs[3] = 1'b0;
end 
// rs[ 2 ]
initial
begin
	rs[2] = 1'b0;
end 
// rs[ 1 ]
initial
begin
	rs[1] = 1'b0;
end 
// rs[ 0 ]
initial
begin
	rs[0] = 1'b1;
end 
// rt[ 31 ]
initial
begin
	rt[31] = 1'b0;
end 
// rt[ 30 ]
initial
begin
	rt[30] = 1'b0;
end 
// rt[ 29 ]
initial
begin
	rt[29] = 1'b0;
end 
// rt[ 28 ]
initial
begin
	rt[28] = 1'b0;
end 
// rt[ 27 ]
initial
begin
	rt[27] = 1'b0;
end 
// rt[ 26 ]
initial
begin
	rt[26] = 1'b0;
end 
// rt[ 25 ]
initial
begin
	rt[25] = 1'b0;
end 
// rt[ 24 ]
initial
begin
	rt[24] = 1'b0;
end 
// rt[ 23 ]
initial
begin
	rt[23] = 1'b0;
end 
// rt[ 22 ]
initial
begin
	rt[22] = 1'b0;
end 
// rt[ 21 ]
initial
begin
	rt[21] = 1'b0;
end 
// rt[ 20 ]
initial
begin
	rt[20] = 1'b0;
end 
// rt[ 19 ]
initial
begin
	rt[19] = 1'b0;
end 
// rt[ 18 ]
initial
begin
	rt[18] = 1'b0;
end 
// rt[ 17 ]
initial
begin
	rt[17] = 1'b0;
end 
// rt[ 16 ]
initial
begin
	rt[16] = 1'b0;
end 
// rt[ 15 ]
initial
begin
	rt[15] = 1'b0;
end 
// rt[ 14 ]
initial
begin
	rt[14] = 1'b0;
end 
// rt[ 13 ]
initial
begin
	rt[13] = 1'b0;
end 
// rt[ 12 ]
initial
begin
	rt[12] = 1'b0;
end 
// rt[ 11 ]
initial
begin
	rt[11] = 1'b0;
end 
// rt[ 10 ]
initial
begin
	rt[10] = 1'b0;
end 
// rt[ 9 ]
initial
begin
	rt[9] = 1'b0;
end 
// rt[ 8 ]
initial
begin
	rt[8] = 1'b0;
end 
// rt[ 7 ]
initial
begin
	rt[7] = 1'b0;
end 
// rt[ 6 ]
initial
begin
	rt[6] = 1'b0;
end 
// rt[ 5 ]
initial
begin
	rt[5] = 1'b0;
end 
// rt[ 4 ]
initial
begin
	rt[4] = 1'b0;
end 
// rt[ 3 ]
initial
begin
	rt[3] = 1'b0;
end 
// rt[ 2 ]
initial
begin
	rt[2] = 1'b0;
end 
// rt[ 1 ]
initial
begin
	rt[1] = 1'b0;
end 
// rt[ 0 ]
initial
begin
	rt[0] = 1'b1;
end 
// shamt[ 4 ]
initial
begin
	shamt[4] = 1'b0;
end 
// shamt[ 3 ]
initial
begin
	shamt[3] = 1'b0;
end 
// shamt[ 2 ]
initial
begin
	shamt[2] = 1'b0;
end 
// shamt[ 1 ]
initial
begin
	shamt[1] = 1'b0;
end 
// shamt[ 0 ]
initial
begin
	shamt[0] = 1'b0;
end 

ula_vlg_sample_tst tb_sample (
	.funct(funct),
	.opcode(opcode),
	.rs(rs),
	.rt(rt),
	.shamt(shamt),
	.sampler_tx(sampler)
);

ula_vlg_check_tst tb_out(
	.carryOut(carryOut),
	.negativo(negativo),
	.overflow(overflow),
	.rd(rd),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

